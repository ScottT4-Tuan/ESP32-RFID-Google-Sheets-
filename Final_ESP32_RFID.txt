#include "WiFi.h"
#include <SPI.h>
#include <MFRC522.h>
#include <HTTPClient.h>
//----------------------------------------
#define RST_PIN 21          // Configurable, see typical pin layout above
#define SS_PIN  5         // Configurable, see typical pin layout above
#define MOSI_PIN  23
#define MISO_PIN  19
#define SCK_PIN 18
//----------------------------------------SSID and PASSWORD of your WiFi network.
const char* ssid = "Scott";  //--> Your wifi name
const char* password = "12345678"; //--> Your wifi password
String ID; 
int row=0;
String sheet_value = ""; 
int check_value = 0;
//----------------------------------------
int age = 0; 
String uid = "";
String name = "";
String phone = "";
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.
MFRC522::MIFARE_Key key;
// Google script Web_App_URL.
String Web_App_URL = "https://script.google.com/macros/s/AKfycbyeZs4HtgWYOZrQYUJOwehPRHFZHUSnC6SF7SCy8sUlvcyDSDBGj-HkoMXmmFIqlGqc3g/exec";
void setup() {
  // put your setup code here, to run once:

  Serial.begin(115200);
  SPI.begin();        // Init SPI bus
  mfrc522.PCD_Init(); // Init MFRC522 card
  delay(1000);

  //----------------------------------------Set Wifi to STA mode
  Serial.println();
  Serial.println("-------------");
  Serial.println("WIFI mode : STA");
  WiFi.mode(WIFI_STA);
  Serial.println("-------------");
  //---------------------------------------- 

  //----------------------------------------Connect to Wi-Fi (STA).
  Serial.println();
  Serial.println("------------");
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  //:::::::::::::::::: The process of connecting ESP32 with WiFi Hotspot / WiFi Router.
  // The process timeout of connecting ESP32 with WiFi Hotspot / WiFi Router is 20 seconds.
  // If within 20 seconds the ESP32 has not been successfully connected to WiFi, the ESP32 will restart.
  // I made this condition because on my ESP32, there are times when it seems like it can't connect to WiFi, so it needs to be restarted to be able to connect to WiFi.

  int connecting_process_timed_out = 20; //--> 20 = 20 seconds.
  connecting_process_timed_out = connecting_process_timed_out * 2;
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(250);
    delay(250);
    if (connecting_process_timed_out > 0) connecting_process_timed_out--;
    if (connecting_process_timed_out == 0) {
      delay(1000);
      ESP.restart();
    }
  }
  
  Serial.println();
  Serial.println("WiFi connected");
  Serial.println("------------");
  //::::::::::::::::::
  //----------------------------------------

  delay(100);



  delay(2000);
}
//________________________________________________________________________________

//________________________________________________________________________________VOID LOOP()
void loop() {
  if ( ! mfrc522.PICC_IsNewCardPresent())
    return;
    // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial())
    return;
  take_UID(mfrc522.uid.uidByte, mfrc522.uid.size);
  // read_sheet();
  send();
  getin4();
  delay(2000);
}
//________________________________________________________________________________
void take_UID(byte *buffer, byte bufferSize) {
  ID = "";
  int arraySize = sizeof(buffer) / sizeof(buffer[0]);
  for(int i = 0; i < arraySize; i++){
    ID += String(buffer[i]);
  }
  // Serial.println("-------------");
  Serial.println("Checking Card...");
  Serial.print("Card's UID: "); Serial.println(ID);
}
void send(){
    if (WiFi.status() == WL_CONNECTED) {
    // Create a URL for sending or writing data to Google Sheets.
    String Send_Data_URL = Web_App_URL + "?sts=write";
    // Send_Data_URL += "&name=" + String("Tuan");
    // Send_Data_URL += "&age=" + ID;
    // Send_Data_URL += "&row=" + String(row);
    Send_Data_URL += "&ID=" + ID;
    Serial.println("-------------");
    Serial.println("Send data to Google Spreadsheet...");
    // Serial.print("URL : ");
    // Serial.println(Send_Data_URL);

    //::::::::::::::::::The process of sending or writing data to Google Sheets.
      // Initialize HTTPClient as "http".
      HTTPClient http;
  
      // HTTP GET Request.
      http.begin(Send_Data_URL.c_str());
      http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);
  
      // Gets the HTTP status code.
      int httpCode = http.GET(); 
      // Serial.print("HTTP Status Code : ");
      // Serial.println(httpCode);
  
      // Getting response from google sheets.
      String payload;
      if (httpCode > 0) {
        payload = http.getString();
        // Serial.println("Payload : " + payload);    
      }
      
      http.end();
    //::::::::::::::::::
    // Serial.println("-------------");
  }
  //----------------------------------------

  delay(1000);
}
String getValue(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = { 0, -1 };
  int maxIndex = data.length() - 1;
  
  for (int i = 0; i <= maxIndex && found <= index; i++) {
    if (data.charAt(i) == separator || i == maxIndex) {
      found++;
      strIndex[0] = strIndex[1] + 1;
      strIndex[1] = (i == maxIndex) ? i+1 : i;
    }
  }
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}
void read_sheet(){
  //----------------------------------------Conditions that are executed when WiFi is connected.
  // This condition is the condition for reading or getting data from Google Sheets.
  if (WiFi.status() == WL_CONNECTED) {
    // Create a URL for reading or getting data from Google Sheets.
    String Read_Data_URL = Web_App_URL + "?sts=read";
    Serial.println();
    Serial.println("-------------");
    Serial.println("Read data from Google Spreadsheet...");
    Serial.print("URL : ");
    Serial.println(Read_Data_URL);

    //::::::::::::::::::The process of reading or getting data from Google Sheets.
      // Initialize HTTPClient as "http".
      HTTPClient http;

      // HTTP GET Request.
      http.begin(Read_Data_URL.c_str());
      http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);

      // Gets the HTTP status code.
      int httpCode = http.GET(); 
      Serial.print("HTTP Status Code : ");
      Serial.println(httpCode);
  
      // Getting response from google sheet.
      String payload;
      if (httpCode > 0) {
        payload = http.getString();
        // Serial.println("Payload : " + payload);  
      }
  
      http.end();
    
    Serial.println("-------------");
    if (httpCode == 200){
      for (int i = 1; i<100; i++){
        sheet_value=getValue(payload, ',', i);
        Serial.print("Checking: "); Serial.println(sheet_value);
        if (sheet_value == ID){
          Serial.print("Final:"); Serial.println(sheet_value);
          row = i; 
          Serial.println(row);
          break; 
        }
      }
    }
  }
}
void getin4(){

  if (WiFi.status() == WL_CONNECTED) {
    // Create a URL for reading or getting data from Google Sheets.
    String Read_Data_URL = Web_App_URL + "?sts=read";

    //::::::::::::::::::The process of reading or getting data from Google Sheets.
      // Initialize HTTPClient as "http".
      HTTPClient http;

      // HTTP GET Request.
      http.begin(Read_Data_URL.c_str());
      http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);

      // Gets the HTTP status code.
      int httpCode = http.GET(); 
      // Getting response from google sheet.
      String payload;
      if (httpCode > 0) {
        payload = http.getString();
        // Serial.println("Payload : " + payload);  
      }
  
      http.end();
    //::::::::::::::::::
    Serial.println("-------------");

    //::::::::::::::::::Conditions that are executed if reading or getting data from Google Sheets is successful (HTTP Status Codes : 200).
    if (httpCode == 200) {
      // The process of separating data that is read or obtained from Google Sheets.
      uid = getValue(payload, ',', 0);
      name = getValue(payload, ',', 1);
      age = getValue(payload, ',', 2).toInt();
      phone = getValue(payload, ',', 3);
      Serial.println("UID: " + uid);
      Serial.println("Name: " + name); 
      Serial.print("Age: "); Serial.println(age);
      Serial.println("Phone Number: " + phone);
    //::::::::::::::::::
  }
  }
}